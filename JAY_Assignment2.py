# -*- coding: utf-8 -*-
"""JAY_Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bgDmIEN7rsm1A_o3HFT2VfdfgZD1ZohI
"""
#importing the libraries
import numpy as np 
import matplotlib.pyplot as plt 
from sklearn.datasets import fetch_openml
from sklearn.decomposition import PCA 
from sklearn.manifold import TSNE 
# for removing warnings
import warnings
warnings.filterwarnings('ignore')

# Define plot function
def plot_MNIST_sample(X):
    fig, ax = plt.subplots(nrows=3, ncols=3, figsize=(5,5))
    for i, axi in enumerate(ax.flat):
        axi.imshow(X[i].reshape(28,28), cmap='gray')
        axi.set(xticks=[], yticks=[])

# Load MNIST dataset
mnist = fetch_openml(name='mnist_784', as_frame=False)
X = mnist.data / 255.0 
y = mnist.target 

# Display first nine images
plot_MNIST_sample(X[:9])
plt.show()

# Apply PCA 
pca = PCA(n_components=2) 
X_pca = pca.fit_transform(X) 

# Apply t-SNE 
tsne = TSNE(n_components=2, perplexity=30.0, n_iter=1000, random_state=0) 
X_tsne = tsne.fit_transform(X) 

fig, ax = plt.subplots(1, 2, figsize=(10, 5)) 

# PCA and tca plot
ax[0].scatter(X_pca[:, 0], X_pca[:, 1], c=y.astype(np.int), cmap='jet') 
ax[0].set_title('PCA') 
ax[1].scatter(X_tsne[:, 0], X_tsne[:, 1], c=y.astype(np.int), cmap='jet') 
ax[1].set_title('t-SNE') 
plt.show()
